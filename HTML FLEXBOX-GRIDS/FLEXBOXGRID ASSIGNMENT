<!DOCTYPE html>
<html>
<head>
   <title> HTML Tutorial </title>
    <style>
body {margin:0;}

.icon-bar {
  width: 100%;
  background-color: #555;
  overflow: auto;
}

.icon-bar a {
  float: left;
  width: 20%;
  text-align: center;
  padding: 12px 0;
  transition: all 0.3s ease;
  color: white;
  font-size: 36px;
}

.icon-bar a:hover {
  background-color: #B22222;
}

.active {
  background-color: #B22222;
}
h1 
{color: #778899; text-align: center;}
h2
{color: #B0C4DE; font-family: Georgia, serif;}
p
{color: #778899; font-family: Fantasy, Copperplate; font-size: 20px;}

.flex-container {
  display: flex;
  justify-content: space-around;
  align-items: center;
  flex-wrap: wrap;
  gap: 10px;
  margin-top: 15px;
}

.flex-container > div {
  background-color: #F5FFFA ;
  border: 1px solid black;
  margin: 1px;
  padding: 20px;
  font-size: 30px;
  text-align: center;
}
.grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
  padding: 10px;
}

.grid-container > div {
  background-color: #f1f1f1;
  border: 1px solid black;
  margin: 1px;
  padding: 20px;
  font-size: 30px;
  text-align: center;
}
.center {
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 50%;
}
</style> 

</head>
<body bgcolor =  #DCDCDC>
  
<!-- Add icon library -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<!-- Add icon library -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<div class="icon-bar">
  <a class="active" href="https://www.w3schools.com/html/"><i class="fa fa-home"></i></a>
  <a href="file:///C:/Users/Waliyah/Downloads/html%20assign%203.html"><i class="fa fa-caret-square-o-left" aria-hidden="true"></i></a>
  <a href="#"><i class="fa fa-caret-square-o-right" aria-hidden="true"></i></a>
  <a href="https://www.w3schools.com/"><i class="fa fa-globe"></i></a>
  <a href="#"><input type="reset" value = Refresh /></a>
</div>
<h1><font size=12><font face=monospace> Basics of HTML </font></h1>
<h2><b><font size = 4>Unit 2: Implementing Flexboxes and Grids</font></b></h2>

<p>In this lesson we will learn how to implement flexboxes and grids. Flexboxes are a layout model used to
arrange items within a container in a flexible manner. Items align in one direction and can be adjustsed using 'justify-content' and 'align-items' functions. You can see them implemented as below, especially when you try to resize the screen: </p>
<div class="flex-container">
  <div>Item A</div>
  <div>Item B</div>
  <div>Item C</div>
  <div>Item D</div>
  <div>Item E</div>
  <div>Item F</div>
  <div>Item G</div>
</div>

<p> Next we focus on grids. Grids are another form of layout, used to organize data in
rows and columns. Unlike in flexboxes, items in grids align in two dimensions using 'grid-template-columns' <b>OR</b> 'grid-template-rows'. The grid adapts to screen size automatically. A grid always consists of a grid container (the parent item) and other grid 
items. There are many different types of grids that can be implemented, but for now we will
implement a regular grid for this tutorial.</p>
<div class="grid-container">
  <div>Item A</div>
  <div>Item B</div>
  <div>Item C</div>
  <div>Item D</div>
  <div>Item E</div>
  <div>Item F</div>
  <div>Item G</div>
  <div>Item H</div>
</div>
<p> Both systems adjust layouts dynamically when the screen size changes, making designs responsive across devices. For example, you can use flex-direction: column; on smaller screens or set grid-template-columns: 1fr; in media queries to stack elements vertically. Key features include flexible alignment, spacing control, ordering of elements, and adaptabilityâ€”making Flexbox ideal for simpler, linear layouts and Grid best for complex, structured page designs. To better understand the distinction between flexboxes and grids. Please refer to the image below: <br><br>
<img src="https://www.differencebetween.net/wp-content/uploads/2020/10/CSS-Flexbox-vs-CSS-Grid.jpg" class = "center" alt = "https://www.differencebetween.net/wp-content/uploads/2020/10/CSS-Flexbox-vs-CSS-Grid.jpg" align = 'center' height = "600" width = "400" ></p>
<p> This concludes our lesson on flexboxes and grids. For more information, please visit:
<a href="https://www.w3schools.com/css/css3_flexbox.asp">W3Schools Flexbox Tutorial</a> and
<a href="https://www.w3schools.com/css/css_grid.asp">W3Schools Grid Tutorial</a>.</p> 
</body>
</html>
